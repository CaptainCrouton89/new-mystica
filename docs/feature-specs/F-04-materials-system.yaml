title: Technical Specification - Materials System
template: ~/.claude/file-templates/init-project/feature-spec/feature-title.yaml
feature_id: F-04
status: planned
last_updated: 2025-01-27

summary: "Collectible materials that modify item stats with zero-sum trade-offs. Materials stack in inventory (MaterialStacks), displayed with style-based border colors. Applied via dedicated Crafting Screen (accessible from main menu or 'Craft' action in inventory). Materials convert to unique instances when applied (MaterialInstances). Max 3 materials per item (hard limit). Styled materials are visual variants with normal stat effectiveness. Image generation creates combo-specific visuals cached globally with craft count tracking (10-15s sync for MVP, async with crafting times in later MVP)."

functional_overview:
  core_logic: "Materials stack in player inventory (MaterialStacks table). Applying material decrements stack, creates MaterialInstance, links via ItemMaterials. Image generation creates combo-specific visuals cached globally with craft count tracking (10-15s SYNC for MVP0/1, async with crafting times in later MVPs). Global ItemImageCache stores combo images with craft_count. Material removal costs gold (100 × item level) and returns material to stack. To replace material: remove old (costs gold, returns to stack) then apply new (consumes from stack)."
  data_schema: "Materials (seed data), MaterialStacks (inventory), MaterialInstances (applied materials), ItemMaterials (junction), ItemImageCache (combo images)"
  api_endpoints:
    - "GET /materials"
    - "GET /materials/inventory"
    - "POST /items/{item_id}/materials/apply"
    - "POST /items/{item_id}/materials/remove"
  integration_points:
    - "Base items (F-03) receive material modifications"
    - "Drop system (F-05) awards materials from combat"
    - "Combat stat calculation uses materialed items"
    - "F-09 Inventory Management (materials displayed with 'Craft' action, opens crafting screen)"
    - "Crafting Screen (new main menu destination for item + material crafting)"

detailed_design:
  data_structures:
    - name: "materials (seed data, count from seed JSON)"
      columns:
        - "id: VARCHAR (PK, e.g., 'coffee', 'diamond', 'rainbow', 'wood')"
        - "name: VARCHAR ('Coffee', 'Diamond', 'Rainbow', 'Wood')"
        - "description: TEXT ('Jittery energy increases attack but reduces accuracy')"
        - "stat_modifiers: JSON {atkPower: +0.10, atkAccuracy: -0.05, defPower: -0.05, defAccuracy: 0} (must sum to 0)"
        - "theme: VARCHAR (defensive, offensive, balanced, precision, chaotic)"

    - name: "material_stacks (inventory stacking)"
      columns:
        - "user_id: UUID (part of composite PK, FK to users)"
        - "material_id: UUID (part of composite PK, FK to materials)"
        - "style_id: UUID (part of composite PK, FK to StyleDefinitions - styles stack separately)"
        - "quantity: INT NOT NULL CHECK (quantity >= 0)"
        - "updated_at: TIMESTAMP"
        - "PRIMARY KEY (user_id, material_id, style_id)"
        - "NOTE: When materials looted, increment quantity. When applied to items, decrement stack and create MaterialInstance."

    - name: "material_instances (applied materials)"
      columns:
        - "id: UUID (PK)"
        - "user_id: UUID (FK to users)"
        - "material_id: UUID (FK to materials)"
        - "style_id: UUID (FK to StyleDefinitions, visual variant with normal stat effectiveness)"
        - "created_at: TIMESTAMP"
        - "crafting_time_seconds: INT (nullable, default null, for async crafting queue in later MVP)"
        - "NOTE: Individual instances created when materials applied from MaterialStacks to items via ItemMaterials."

    - name: "item_materials (junction table)"
      columns:
        - "id: UUID (PK)"
        - "item_id: UUID (FK to items)"
        - "material_instance_id: UUID (FK to material_instances, UNIQUE)"
        - "slot_index: SMALLINT (0-2, which of 3 material slots)"
        - "applied_at: TIMESTAMP"
        - "UNIQUE (item_id, slot_index) - prevents duplicate slots"
        - "UNIQUE (material_instance_id) - prevents reusing material"

    - name: "item_image_cache (global combo cache)"
      columns:
        - "id: UUID (PK)"
        - "item_type_id: UUID (FK to ItemTypes)"
        - "combo_hash: TEXT NOT NULL (deterministic hash: sorted material_ids + style flags)"
        - "image_url: TEXT NOT NULL (R2 URL to generated composite image)"
        - "craft_count: INT NOT NULL DEFAULT 1 (how many times this combo crafted across all users)"
        - "provider: VARCHAR (AI provider: gemini, seedream, etc.)"
        - "created_at: TIMESTAMP"
        - "UNIQUE (item_type_id, combo_hash)"
        - "NOTE: Global cache reused across all users. On first combo application, generate image (20s sync), upload to R2, create row."

  apis:
    - method: "GET"
      endpoint: "/materials"
      request: "No auth required (library of all materials)"
      response: "{materials: [{id, name, description, stat_modifiers, theme}]}"
      errors: []

    - method: "GET"
      endpoint: "/materials/inventory"
      request: "Header: Authorization Bearer token"
      response: "{materials: [{material_id, name, style_id, quantity}]}"
      note: "Returns MaterialStacks table directly - quantity available for application"
      errors:
        - "401: Unauthorized"

    - method: "POST"
      endpoint: "/items/{item_id}/materials/apply"
      request: "{material_id: UUID, style_id: UUID, slot_index: INT (0-2)}"
      note: "Decrements MaterialStacks.quantity, creates MaterialInstance, links via ItemMaterials. Triggers image generation if new combo."
      response: "{success: true, item: {id, base_type, level, applied_materials, computed_stats}, is_first_craft: BOOLEAN, craft_count: INT}"
      errors:
        - "400: Item already has 3 materials (max reached)"
        - "404: Item or material not found"
        - "400: Material not owned or quantity = 0"
        - "423: Image generation in progress (10-15s), try again"

    - method: "POST"
      endpoint: "/items/{item_id}/materials/remove"
      request: "{material_index: INT (0-2), gold_cost: INT}"
      note: "Deletes ItemMaterials row, deletes MaterialInstance, increments MaterialStacks (returns material to stack). Recomputes combo_hash and triggers image generation if new combo."
      response: "{success: true, gold_spent: INT, item: {updated item with removed material}, is_first_craft: BOOLEAN, craft_count: INT}"
      errors:
        - "400: Insufficient gold"
        - "400: Invalid material index or slot empty"
        - "404: Item not found"
        - "423: Image generation in progress (10-15s), try again"

  diagrams: |
    Material Crafting Flow (via Crafting Screen):
    1. Player opens Crafting Screen from main menu OR taps 'Craft' on item/material in inventory
    2. If from inventory: selected item/material pre-filled in appropriate slot (left=item, right=material)
    3. If from main menu: both slots empty
    4. Player taps item slot (left) → drawer opens showing ALL items with rarity borders and equipped badges
    5. Player selects item → item fills left slot
    6. Player taps material slot (right) → drawer opens showing MaterialStacks with style borders and quantities
    7. System filters materials already applied to selected item (max 3, no duplicates)
    8. Player selects material from stack
    9. System displays preview: Left (original item), Middle ('+' + material icon), Right (question mark - no generated preview)
    10. Player sees stats comparison with increases (green, larger) and decreases (red, smaller)
    11. Player taps 'Craft' button to confirm
    12. System validates: item.applied_materials.length < 3 AND MaterialStacks.quantity >= 1
    13. System decrements MaterialStacks.quantity by 1
    14. System creates MaterialInstance row (user_id, material_id, style_id)
    15. System creates ItemMaterials row linking item_id + material_instance_id + slot_index
    16. System computes combo_hash from sorted material_ids + style flags (order-independent)
    17. System checks ItemImageCache for existing combo image
    18a. If cache hit: use existing image_url, increment craft_count
    18b. If cache miss: trigger 10-15s sync image generation, upload to R2, create ItemImageCache row with craft_count=1
    19. System recalculates item stats (base + all material modifiers × level)
    20. System displays generation progress: 'Crafting your item... 15s remaining'
    21. Client displays success screen with updated item stats, image, and "X players have crafted this combo" if craft_count > 1
    22. Options: 'View Item', 'Return to Crafting', 'Return to Inventory'

    Material Removal Flow (Returns to Stack):
    1. Player views item with materials applied
    2. Player taps "Remove Material" button on specific material slot
    3. System displays gold cost (100 × item level)
    4. Player confirms removal
    5. System validates sufficient gold
    6. System deletes ItemMaterials row for that slot
    7. System deletes MaterialInstance
    8. System increments MaterialStacks.quantity (returns material to stack)
    9. System recomputes combo_hash and triggers image generation workflow (steps 10-11 above)
    10. System recalculates item stats
    11. Client displays updated item, image, and gold balance

    Note: To replace a material, player must remove old material (returns to stack), then apply new material (consumes from stack). Two separate operations.

    Image Generation Workflow (10-15s Sync on First Craft):
    1. System computes combo_hash: SHA256(sorted[material_ids] + style_flags)
    2. System queries ItemImageCache WHERE item_type_id AND combo_hash
    3a. Cache HIT: return image_url, increment craft_count, notify if is_first_craft=false
    3b. Cache MISS: proceed to generation
    4. System calls generate-image.ts with item_type + materials + style flags
    5. AI pipeline checks R2 for item/material reference images (generates missing ones)
    6. AI generates composite image using R2 references (Gemini/Seedream, ~10-15s)
    7. System uploads final image to R2 at items-crafted/{item_type_slug}/{combo_hash}.png
    8. System creates ItemImageCache row (item_type_id, combo_hash, image_url, craft_count=1)
    9. System returns image_url to client with is_first_craft=true notification

    Stat Modifier Combination:
    Base item: {atkPower: 0.4, atkAccuracy: 0.2, defPower: 0.3, defAccuracy: 0.1}
    Material 1: {atkPower: -0.1, atkAccuracy: 0, defPower: +0.1, defAccuracy: 0}
    Material 2: {atkPower: +0.2, atkAccuracy: -0.1, defPower: -0.1, defAccuracy: 0}
    Material 3: {atkPower: 0, atkAccuracy: +0.1, defPower: 0, defAccuracy: 0}

    Combined = base + sum(material modifiers)
    {atkPower: 0.4-0.1+0.2+0 = 0.5, atkAccuracy: 0.2+0-0.1+0.1 = 0.2, defPower: 0.3+0.1-0.1+0 = 0.3, defAccuracy: 0.1}

    Note: Styled materials have normal stat effectiveness (same modifiers as non-styled variants). Style only affects visual appearance.

    Preview System:
    - No generated image preview shown during material selection (question mark placeholder)
    - Final appearance revealed only after material application completes
    - Styled enemy defeats = 100% styled material drop (not 5% chance)
    - Maintains surprise element while providing informed stat-based decisions

dependencies:
  libraries: "AWS S3 SDK (for R2 operations), crypto (for combo_hash generation)"
  services: "Backend materials API, stat calculation service, AI image generation pipeline (generate-image.ts), Cloudflare R2 storage, Replicate/OpenAI APIs"
  data_sources: "Materials seed data (JSON file), MaterialStacks table, MaterialInstances table, ItemMaterials table, ItemImageCache table"

implementation_status:
  progress: 50  # Database schema + seed data complete, service implementation needed
  completed_components:
    - "Database schema (Materials, MaterialStacks, MaterialInstances, ItemMaterials, ItemImageCache, StyleDefinitions)"
    - "15 seed materials loaded with zero-sum stat modifiers"
    - "5 style definitions (normal, pixel_art, watercolor, neon, holographic) with spawn rates"
    - "MaterialController skeleton with 3 endpoints (getInventory, applyMaterial, replaceMaterial)"
    - "MaterialService skeleton with documented workflow TODOs"
    - "Zod validation schemas (ApplyMaterialSchema, ReplaceMaterialSchema)"
    - "Items table columns: material_combo_hash, generated_image_url, is_styled, image_generation_status"
  in_progress_components:
    - "MaterialController.getMaterials implementation (GET /materials library endpoint)"
    - "MaterialService.getMaterialsInventory implementation (MaterialStacks for user)"
    - "MaterialService.applyMaterial implementation (apply + image generation orchestration)"
    - "MaterialService.removeMaterial implementation (remove + gold cost validation)"
    - "MaterialService.replaceMaterial implementation (remove old + apply new)"
    - "Image generation integration (combo hashing, cache lookup, generation trigger)"
  blocked_items:
    - code: "IMAGE_GENERATION_NOT_INTEGRATED"
      description: "ImageGenerationService exists but not integrated with material combo workflow. Needs R2 upload to items-crafted/{item_type}/{combo_hash}.png and ItemImageCache management"
      impact: "Material application will fail on image generation step (10-15s sync generation required)"
    - code: "MATERIAL_ROUTES_NOT_REGISTERED"
      description: "Material endpoints not wired in routes/index.ts or app.ts"
      impact: "API endpoints not accessible"
  notes:
    - "Database layer: 100% complete with constraints enforced (slot_index 0-2, quantity >= 0, stat_modifiers sum to 0)"
    - "Service layer: Needs implementation of 3 core methods (getMaterialInventory, applyMaterial, replaceMaterial)"
    - "applyMaterial workflow: 11 steps documented in MaterialService TODOs"
    - "replaceMaterial workflow: 12 steps documented in MaterialService TODOs"
    - "Light MVP planned: Sync 10-15s image generation (blocks UI), material count from seed data"
    - "Later MVP planned: Async image generation with crafting times, push notifications"
    - "Future planned: Visual effects for styled materials, material preview before apply, undo last material (grace period), material trading/gifting, 'X players crafted this combo' notifications, is_first_craft celebrations"
    - "Note: Material removal + apply = replacement flow. Two separate operations for clarity."
    - "Materials range from tame (Coffee, Gum, Paper) to extreme (Diamond, Plasma, Lightning), age-appropriate subset for early app store versions"
    - "Image generation: On-demand combo images cached globally, deterministic combo_hash for cache hits, R2 storage at items-crafted/{item_type_slug}/{combo_hash}.png"
    - "Material Rarity: Auto-classified into strength tiers (common/uncommon/rare/epic) based on stat modifier magnitude. Tiers are derived at runtime using MaterialStrengthTiers thresholds - not stored as material property."
    - "Drop Rate Control: base_drop_weight serves as per-material baseline for drop calculations. Final drop weights computed as base_drop_weight × tier_multiplier from LootPoolTierWeights system."

seed_data_example: |
  Full seed data available in: docs/seed-data-materials.json
  Note: Age-appropriate subset for early versions - inappropriate materials (Cocaine, Lube) moved to rare/epic tiers or removed for app store compliance

  Materials organized by theme:

  COMMON - Small modifiers (±0.05 to ±0.10):
  Coffee, Gum, Feather, Button, Candle, Pizza, Mushroom, Cactus, Sea Shell, Coral,
  Wood, Paper, Fabric, Rubber, Plastic, Glass, Sand, Foam, Cotton, Dirt

  UNCOMMON - Moderate modifiers (±0.08 to ±0.15):
  Matcha Powder, Bubble, Slime, Propeller, Magnet, Colorful Ribbon, Sparkles, Comet,
  Star, Flame, Denim, Chrome, Latex, Ice, A Cloud

  RARE - Large modifiers (±0.15 to ±0.25):
  Rainbow, Lava, Ghost, Shadow, Goo, Void, Glitter, Neon Sign

  EPIC - Extreme modifiers (±0.20 to ±0.30), highly unbalanced:
  Diamond, Lightning, Laser Beam, Stardust, Plasma

  Examples:
  - Diamond (Epic): {atkPower: -0.25, atkAccuracy: -0.05, defPower: +0.25, defAccuracy: +0.05} (ultimate defense tank)
  - Plasma (Epic): {atkPower: +0.28, atkAccuracy: +0.15, defPower: -0.30, defAccuracy: -0.13} (glass cannon offensive)
  - Rainbow (Rare): {atkPower: +0.15, atkAccuracy: +0.10, defPower: -0.15, defAccuracy: -0.10} (balanced offensive)

  All modifiers sum to 0 (zero-sum trade-offs)

user_stories:
  - US-303 (new: Apply Material to Item)
  - US-304 (new: Remove Material from Item)
