title: Technical Specification - Geolocation & Map System
template: ~/.claude/file-templates/init-project/feature-spec/feature-title.yaml
feature_id: F-01
status: complete
last_updated: 2025-01-27

summary: "Integrate Google Maps to display player location and nearby enemy spawn points. Enable location-based discovery by tracking GPS position and calculating proximity to spawn locations."

functional_overview:
  core_logic: "Track player GPS coordinates continuously. On app open, API call with user's exact coordinates generates location instantly from 30 pre-generated hardcoded SF locations. Display markers on map. Activate locations when player within 50m threshold. Pool union system: Each location fetches union of (location_type pool ∪ state pool ∪ latitude pool ∪ longitude pool ∪ generic pool with 100 base enemies), then combat level filters from that larger pool. GPS permission required but non-blocking in MVP0 - unlimited re-battles at same location."
  data_schema: "Locations table: id, lat, lng, city_id, enemy_type, item_type, spawn_radius. Player location tracked client-side."
  api_endpoints:
    - "GET /locations/nearby?lat={lat}&lng={lng}&radius={meters}"
    - "POST /locations/generate" # MVP0: Generate location instantly from hardcoded SF set
    - "GET /locations/:id"
  integration_points:
    - "Google Maps SDK for iOS"
    - "CoreLocation framework for GPS"
    - "Backend location service"

detailed_design:
  data_structures:
    - name: "locations"
      columns:
        - "id: UUID (PK)"
        - "lat: DECIMAL(10,8)"
        - "lng: DECIMAL(11,8)"
        - "location_type: VARCHAR (library, gym, park, coffee_shop, etc.)"
        - "state_code: VARCHAR (US state code: CA, NY, TX, etc.)"
        - "country_code: VARCHAR (ISO country code: USA, CAN, etc.)"
        # enemy_type and item_type deprecated - now handled by EnemyPools and LootPools
        - "spawn_radius: INT (default 50m)"
        - "is_premium: BOOLEAN (default false)"
        - "created_at: TIMESTAMP"

  apis:
    - method: "GET"
      endpoint: "/locations/nearby"
      request: "Query params: lat (float), lng (float), radius (int, meters)"
      response: "{locations: [{id, lat, lng, enemy_type, item_type, distance_meters}]}"
      errors:
        - "400: Invalid coordinates"
        - "500: Database error"

    - method: "POST"
      endpoint: "/locations/generate"
      request: "Body: {lat: float, lng: float}"
      response: "{location: {id, lat, lng, location_type, enemy_pools}}"
      errors:
        - "400: Invalid coordinates"
        - "500: Generation failed"

    - method: "GET"
      endpoint: "/locations/:id"
      request: "Path param: id (UUID)"
      response: "{id, lat, lng, city_id, enemy_type, item_type, spawn_radius, is_premium}"
      errors:
        - "404: Location not found"

  diagrams: |
    Map View Flow (MVP0):
    1. App launches → Request location permissions (non-blocking)
    2. If permission denied → Continue with limited functionality, show advisory notice
    3. CLLocationManager starts tracking (if permitted)
    4. On location update → POST /locations/generate for instant location from 30 hardcoded SF set
    5. Render markers on map (just icons, no preview until tapped)
    6. Monitor distance to each location
    7. Player taps location marker → Check proximity
    8. If not close enough → Show modal: 'You need to be closer to start this encounter'
    9. If close enough → Show location info modal with loot types and 'Start' button
    10. Player taps 'Start' → Level selection screen (1-20 scrollable list)
    11. Player selects level → Launch encounter with random enemy at selected level - unlimited re-battles

    Pool Union Strategy:
    - Location fetches: location_type pool ∪ state pool ∪ latitude pool ∪ longitude pool ∪ generic pool (100 base enemies)
    - Combat level filters from union to show only appropriate level enemies
    - No cooldowns in MVP0 - players can re-battle same location infinitely

    Permission Handling (MVP0):
    - On first launch: Request "When In Use" location permission
    - On denial: Show advisory notice but allow progression
    - GPS preferred but not mandatory for MVP0 core gameplay
    - Future MVP: Make GPS mandatory with blocking behavior

dependencies:
  libraries: "Google Maps SDK for iOS (pod 'GoogleMaps'), CoreLocation"
  services: "Google Maps API with API key, backend location service"
  data_sources: "PostgreSQL locations table, real-time GPS from device"

implementation_status:
  progress: 100  # Backend complete, frontend MapView integration blocked
  completed_components:
    - "GET /api/v1/locations/nearby API endpoint"
    - "GET /api/v1/locations/:id API endpoint"
    - "LocationService with PostGIS integration"
    - "17 integration tests (tests/integration/locations.test.ts)"
    - "30 SF locations seeded via migrations/seed_sf_locations.sql"
    - "PostGIS RPC function (migrations/create_nearby_locations_function.sql)"
    - "JWT authentication middleware for location endpoints"
    - "Zod validation schemas for location requests"
  in_progress_components: []
  blocked_items:
    - item: "SwiftUI MapView integration"
      reason: "Google Maps SDK setup required, CoreLocation permissions handling needed"
    - item: "Frontend location display and interaction"
      reason: "Waiting for MapView infrastructure"
  notes:
    - "Backend: Using PostGIS 3.3.7 for accurate geospatial calculations with ST_Distance geography type for meter-accurate distances"
    - "MVP0: 30 hardcoded SF locations stored in database, no cooldowns, instant location generation API, GPS permission non-blocking"
    - "MVP1 planned: Add cooldown system, expand to more cities, make GPS permission blocking"
    - "Full MVP planned: Dynamic location generation, real-time spawn updates, advanced pool strategies"
    - "Future: Optimize marker rendering for 100+ locations, add location clustering, offline caching"

user_stories:
  - US-101
  - US-102
