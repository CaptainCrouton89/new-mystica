title: Technical Specification - Item Upgrade System
template: ~/.claude/file-templates/init-project/feature-spec/feature-title.yaml
feature_id: F-06
status: planned
last_updated: 2025-10-19

summary: "Spend gold to increase item level. Each level increases all item stats proportionally while maintaining normalized ratios. Gold cost increases with each level. Upgrading contributes to vanity level progression."

functional_overview:
  core_logic: "Player selects item and spends gold to level it up. Item level increments by 1. All stats scale by new level (base_stats × level). Gold cost formula: base_cost × level^1.5. Vanity level increases based on total item levels across all items."
  data_schema: "player_items.level incremented, player.gold decremented, player.vanity_level recalculated"
  api_endpoints:
    - "POST /items/:item_id/upgrade"
    - "GET /items/:item_id/upgrade-cost"
  integration_points:
    - "Base items (F-03) receive level multiplier"
    - "Materials (F-04) modifiers apply before level scaling"
    - "Combat drops (F-05) provide gold for upgrades"

detailed_design:
  data_structures:
    - name: "player_items (add level column)"
      columns:
        - "level: INT (default 1, min 1, no max for now)"

    - name: "users (add vanity_level)"
      columns:
        - "vanity_level: INT (derived from sum of all item levels)"
        - "gold: INT (currency balance)"

  apis:
    - method: "GET"
      endpoint: "/items/:item_id/upgrade-cost"
      request: "Path param: item_id (UUID)"
      response: "{current_level: 5, next_level: 6, gold_cost: 450, player_gold: 1200, can_afford: true}"
      errors:
        - "404: Item not found or not owned"

    - method: "POST"
      endpoint: "/items/:item_id/upgrade"
      request: "{item_id: UUID}"
      response: |
        {
          success: true,
          item: {
            id: uuid,
            base_type: 'sword',
            level: 6, // incremented
            applied_materials: ['iron', 'flame'],
            computed_stats: {atkPower: 3.0, atkAccuracy: 1.2, defPower: 1.2, defAccuracy: 0.6} // scaled by level 6
          },
          gold_spent: 450,
          new_gold_balance: 750,
          new_vanity_level: 42 // recalculated
        }
      errors:
        - "400: Insufficient gold"
        - "404: Item not found or not owned"

  diagrams: |
    Upgrade Flow:
    1. Player views item detail screen
    2. Client requests GET /items/:id/upgrade-cost
    3. Server calculates cost: base_cost × level^1.5
    4. Server checks player.gold >= cost
    5. Client displays "Upgrade to Level X" button with cost
    6. Player taps upgrade button
    7. Client sends POST /items/:id/upgrade
    8. Server validates gold, decrements gold, increments item.level
    9. Server recalculates item stats: (base + material_mods) × new_level
    10. Server recalculates vanity_level: sum(all_item_levels) / 6 (or custom formula)
    11. Server returns updated item, gold, vanity_level
    12. Client displays success animation and updated stats

    Gold Cost Formula:
    base_cost = 100 (configurable)
    cost_for_level_N = base_cost × N^1.5

    Examples:
    Level 1 → 2: 100 × 1.5^1.5 ≈ 184 gold
    Level 2 → 3: 100 × 2^1.5 ≈ 283 gold
    Level 3 → 4: 100 × 3^1.5 ≈ 520 gold
    Level 5 → 6: 100 × 5^1.5 ≈ 1118 gold
    Level 10 → 11: 100 × 10^1.5 ≈ 3162 gold

    Vanity Level Calculation:
    Simple formula (MVP1):
    vanity_level = floor(sum_of_all_item_levels / 6)

    Example:
    6 items at level 5 each → sum = 30 → vanity = 5
    6 items at levels [10, 8, 7, 6, 5, 4] → sum = 40 → vanity = 6

    Alternative (post-MVP):
    vanity_level = floor(sqrt(sum_of_all_item_levels))
    Grows slower, more meaningful progression

    Stat Scaling Example:
    Base sword (no materials): {atkPower: 0.4, atkAccuracy: 0.2, defPower: 0.3, defAccuracy: 0.1}
    Level 1: {atkPower: 0.4, atkAccuracy: 0.2, defPower: 0.3, defAccuracy: 0.1}
    Level 5: {atkPower: 2.0, atkAccuracy: 1.0, defPower: 1.5, defAccuracy: 0.5}
    Level 10: {atkPower: 4.0, atkAccuracy: 2.0, defPower: 3.0, defAccuracy: 1.0}

    With materials (Iron: +0.1 defPower, -0.1 atkPower):
    Modified base: {atkPower: 0.3, atkAccuracy: 0.2, defPower: 0.4, defAccuracy: 0.1}
    Level 5: {atkPower: 1.5, atkAccuracy: 1.0, defPower: 2.0, defAccuracy: 0.5}

dependencies:
  libraries: "None"
  services: "Backend upgrade service, stat calculation service, economy balance service"
  data_sources: "player_items table, users.gold, users.vanity_level"

implementation_status:
  notes:
    - "Light MVP: Hardcoded upgrade cost = 100 gold flat, simple level increment, no vanity level"
    - "Full MVP: Dynamic cost formula (level^1.5), vanity level calculation, gold validation"
    - "Finished: Upgrade animations, bulk upgrade (level up multiple times at once), upgrade preview, auto-upgrade suggestions"

balancing_parameters:
  base_upgrade_cost: "100 gold (configurable)"
  cost_scaling_exponent: "1.5 (cost grows exponentially but not too fast)"
  gold_per_combat: "500-1000 at level 5 (allows ~1-2 upgrades per combat)"
  vanity_level_formula: "sum(item_levels) / 6 for MVP1 (simple average)"

user_stories:
  - US-306 (new: Upgrade Item with Gold)
  - US-307 (new: View Vanity Level Progress)
