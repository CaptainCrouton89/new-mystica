title: Technical Specification - Premium Items & Monetization
template: ~/.claude/file-templates/init-project/feature-spec/feature-title.yaml
feature_id: F-10
status: planned
last_updated: 2025-01-26

summary: |
  Premium currency (Gems) and special single-location items available through premium purchases.

  **STATUS: PLACEHOLDER SPEC - IAP implementation not yet designed**

  This spec outlines the vision for premium items but does not include:
  - In-app purchase integration
  - Store catalog management
  - Payment processing
  - Entitlements system

  These will be added when monetization is ready for implementation.

functional_overview:
  core_logic: "Gems currency exists alongside Gold. Premium items flagged as premium_only require Gems to purchase/obtain. Users acquire Gems through real-money purchases (future). Premium items may be exclusive to specific locations or purchasable from premium store."
  data_schema: "Currencies table (GOLD, GEMS), UserCurrencyBalances replaces Users.gold_balance, ItemTypes.premium_only boolean field"
  api_endpoints:
    - "GET /currencies (list available currency types)"
    - "GET /users/me/balances (get user's currency balances)"
    - "POST /iap/purchase (future - initiate gem purchase)"
    - "GET /store/premium-items (future - browse premium catalog)"
  integration_points:
    - "Base items (F-03) extended with premium_only flag"
    - "Combat system (F-02) respects premium item spawn rules"
    - "Economy system tracks both GOLD and GEMS via EconomyTransactions"

user_stories:
  - id: "US-TBD-01"
    description: "[Placeholder] Purchase gems with real money"
    acceptance_criteria:
      - "User can view gem bundle options in store"
      - "User can complete purchase via Apple/Google payment"
      - "Gems are added to user balance upon successful payment"
      - "Receipt validation prevents fraud"

  - id: "US-TBD-02"
    description: "[Placeholder] Spend gems on exclusive items"
    acceptance_criteria:
      - "Premium items visible in catalog with gem prices"
      - "User can purchase items if sufficient gem balance"
      - "Premium items added to inventory on purchase"
      - "Gem balance decremented correctly"

  - id: "US-TBD-03"
    description: "[Placeholder] View premium item catalog"
    acceptance_criteria:
      - "Premium items displayed with gem prices"
      - "User balance shown prominently"
      - "Items unavailable if insufficient gems"
      - "Catalog updates with new premium content"

detailed_design:
  data_structures:
    - name: "Currencies (implemented)"
      purpose: "Enumerate available currency types (GOLD active, GEMS reserved)"
      columns:
        - "code: VARCHAR PK (CHECK IN ('GOLD', 'GEMS'))"
        - "display_name: VARCHAR (Gold, Gems)"
        - "description: TEXT"
        - "is_premium: BOOLEAN (false for GOLD, true for GEMS)"
        - "icon_url: TEXT (nullable)"
        - "created_at: TIMESTAMP"
      status: "implemented"

    - name: "UserCurrencyBalances (implemented)"
      purpose: "Track user balances for all currency types"
      columns:
        - "user_id: UUID (part of composite PK)"
        - "currency_code: VARCHAR (part of composite PK)"
        - "balance: INT (NOT NULL, default 0, CHECK >= 0)"
        - "updated_at: TIMESTAMP"
      constraints:
        - "PRIMARY KEY (user_id, currency_code)"
        - "FK user_id → Users.id ON DELETE CASCADE"
        - "FK currency_code → Currencies.code ON DELETE RESTRICT"
      status: "implemented"

    - name: "ItemTypes (extend)"
      purpose: "Add premium_only BOOLEAN field to flag items requiring GEMS"
      columns:
        - "premium_only: BOOLEAN (default false, true for gem-exclusive items)"
      status: "TODO"

  future_data_structures:
    - name: "IAPProducts"
      purpose: "Catalog of purchasable gem bundles (e.g., 100 gems for $0.99)"
      columns:
        - "id: UUID PK"
        - "product_id: VARCHAR (Apple/Google store product ID)"
        - "platform: VARCHAR (ios, android)"
        - "gem_amount: INT (gems awarded)"
        - "price_usd: DECIMAL (price in USD)"
        - "display_name: VARCHAR (Starter Pack, Value Pack)"
        - "is_active: BOOLEAN"
      status: "not planned yet"

    - name: "IAPPurchases"
      purpose: "Transaction records for real-money purchases"
      columns:
        - "id: UUID PK"
        - "user_id: UUID"
        - "product_id: VARCHAR"
        - "platform_transaction_id: TEXT (Apple/Google receipt)"
        - "gems_awarded: INT"
        - "price_paid: DECIMAL"
        - "currency: VARCHAR (USD, EUR, etc.)"
        - "status: VARCHAR (pending, completed, failed, refunded)"
        - "created_at: TIMESTAMP"
      status: "not planned yet"

    - name: "StoreItems"
      purpose: "Premium item catalog with gem prices"
      columns:
        - "id: UUID PK"
        - "item_type_id: UUID"
        - "gem_price: INT"
        - "is_featured: BOOLEAN"
        - "available_until: TIMESTAMP (nullable, for limited-time items)"
      status: "not planned yet"

    - name: "Entitlements"
      purpose: "Track premium feature unlocks (e.g., extra loadout slots)"
      columns:
        - "id: UUID PK"
        - "user_id: UUID"
        - "entitlement_type: VARCHAR (extra_loadout_slot, premium_themes, etc.)"
        - "granted_at: TIMESTAMP"
        - "expires_at: TIMESTAMP (nullable, for time-limited entitlements)"
      status: "not planned yet"

acceptance_criteria:
  - id: "AC-10-01"
    description: "Gems currency type exists in database (inactive until IAP implemented)"
    type: "technical"
    verification: "Query Currencies table shows GOLD (active) and GEMS (reserved) entries"

  - id: "AC-10-02"
    description: "UserCurrencyBalances table tracks both GOLD and GEMS separately"
    type: "technical"
    verification: "UserCurrencyBalances has composite PK (user_id, currency_code) and tracks both currency types"

  - id: "AC-10-03"
    description: "Premium items can be flagged in ItemTypes (premium_only boolean field)"
    type: "technical"
    verification: "ItemTypes table extended with premium_only BOOLEAN field defaulting to false"

api_design:
  current_endpoints:
    - endpoint: "GET /currencies"
      description: "List available currency types (returns GOLD only for now)"
      request: "No parameters"
      response: |
        {
          "currencies": [
            {
              "code": "GOLD",
              "display_name": "Gold",
              "is_premium": false,
              "icon_url": null
            }
          ]
        }
      status: "TODO"

    - endpoint: "GET /users/me/balances"
      description: "Get user's currency balances (gold=500, gems=0)"
      request: "Authorization: Bearer <token>"
      response: |
        {
          "balances": {
            "GOLD": 500,
            "GEMS": 0
          }
        }
      status: "TODO"

  future_endpoints:
    - endpoint: "POST /iap/purchase"
      description: "Initiate gem purchase (not implemented)"
      request: |
        {
          "product_id": "com.mystica.gems_100",
          "platform": "ios",
          "receipt_data": "base64_encoded_receipt"
        }
      response: |
        {
          "purchase_id": "uuid",
          "gems_awarded": 100,
          "status": "completed"
        }
      status: "not planned"

    - endpoint: "GET /store/premium-items"
      description: "Browse premium item catalog (not implemented)"
      request: "Authorization: Bearer <token>"
      response: |
        {
          "items": [
            {
              "item_type_id": "uuid",
              "name": "Golden Dragon",
              "gem_price": 50,
              "is_featured": true,
              "available_until": null
            }
          ]
        }
      status: "not planned"

open_questions:
  - question: "What gem bundle tiers should we offer?"
    context: "Need to define pricing strategy: starter pack ($0.99), value pack ($4.99), mega pack ($9.99), etc."
    impact: "high"

  - question: "Should premium items be exclusive single-location spawns or purchasable anywhere?"
    context: "Original vision was 'single-location items' but needs product decision"
    impact: "medium"

  - question: "What IAP platform integration? (Apple StoreKit, Google Play Billing, Stripe?)"
    context: "Need to choose payment processor before implementing IAPPurchases table"
    impact: "high"

  - question: "Should gems be earnable through gameplay or purchase-only?"
    context: "E.g., daily quests reward 10 gems, achievements reward gems, etc."
    impact: "medium"

  - question: "Premium items: cosmetic only or stat advantages allowed?"
    context: "Pay-to-win concerns vs revenue optimization"
    impact: "high"

implementation_notes: |
  **Current State (MVP):**
  - Currencies table exists with GOLD (active) and GEMS (reserved)
  - UserCurrencyBalances tracks both but GEMS always 0
  - No way to acquire GEMS yet
  - No premium items in seed data yet

  **Future Implementation Checklist:**
  1. Define monetization strategy (pricing, bundles, premium vs cosmetic)
  2. Choose IAP platform (Apple/Google/web payments)
  3. Design store UI/UX
  4. Implement IAPProducts, IAPPurchases tables
  5. Integrate payment SDK
  6. Add server-side receipt validation
  7. Create premium item catalog (StoreItems)
  8. Design entitlements system (premium features beyond items)
  9. Add gem spending flows
  10. Implement refund handling

  **Complexity Estimate:** 4-6 weeks for full monetization system

  **Dependencies:**
  - Apple Developer account ($99/year) for App Store
  - Google Play Developer account ($25 one-time)
  - Server-side receipt validation service
  - Legal review (terms of service, refund policy)

related_features:
  - feature_id: "F-06"
    relationship: "Item Upgrade System could allow gem-based instant upgrades"
  - feature_id: "F-09"
    relationship: "Inventory Management could unlock extra slots with gems"
  - feature_id: "F-TBD"
    relationship: "Daily Quests could reward small gem amounts"
  - feature_id: "F-TBD"
    relationship: "Achievements could reward gems for milestones"

risks:
  - risk: "Payment fraud and chargebacks"
    mitigation: "Server-side receipt validation, fraud detection patterns"
    impact: "high"

  - risk: "Platform policy compliance (Apple/Google rules)"
    mitigation: "Follow platform guidelines, legal review"
    impact: "high"

  - risk: "Refund handling complexity"
    mitigation: "Clear refund policy, automated refund processing"
    impact: "medium"

  - risk: "Pay-to-win perception if premium items are too strong"
    mitigation: "Focus on cosmetic items, limit stat advantages"
    impact: "medium"

  - risk: "Revenue model uncertainty without market data"
    mitigation: "Start with conservative pricing, A/B test bundle sizes"
    impact: "low"

validation_criteria:
  database:
    - "Currencies table exists with GOLD and GEMS entries"
    - "UserCurrencyBalances replaces Users.gold_balance functionality"
    - "EconomyTransactions ledger supports both currency types"
    - "All currency operations go through transaction ledger"

  documentation:
    - "Data plan clearly marks GEMS as 'reserved for future use'"
    - "API contracts define currency endpoints (even if not implemented)"
    - "Feature spec acknowledges placeholder status"

  testing:
    - "Currency balance queries work for both GOLD and GEMS"
    - "GEMS balance always returns 0 (no acquisition method yet)"
    - "Gold operations continue to work unchanged"

technical_debt:
  - "Users.gold_balance field deprecated but not removed (migration needed)"
  - "No actual IAP implementation (placeholder spec only)"
  - "No premium item seed data (ItemTypes.premium_only field needed)"
  - "No store UI/UX (placeholder endpoints only)"