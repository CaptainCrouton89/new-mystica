title: Technical Specification - Base Items & Equipment System
template: ~/.claude/file-templates/init-project/feature-spec/feature-title.yaml
feature_id: F-03
status: in-progress
last_updated: 2025-10-21

summary: "8 equipment slots (weapon, offhand, head, armor, feet, accessory_1, accessory_2, pet) with normalized stat blocks. Base items have stats that sum to 1.0, modified by materials and scaled by level. Equipment state tracked in normalized UserEquipment table. Players start with 1 random common rarity item (no materials applied) and 0 gold."

functional_overview:
  core_logic: "Each player has 8 equipment slots. Base items have normalized stats {atkPower, atkAccuracy, defPower, defAccuracy} summing to 1.0. Materials modify these stats (±0.05-0.30). Item rarity provides stat multipliers (1.00-2.00). Item level multiplies base stats. Total player stats = sum of all 8 equipped items."
  data_schema: "Items table with item_type_id, level. Equipment state in UserEquipment table, materials in ItemMaterials table"
  api_endpoints:
    - "GET /inventory"
    - "GET /equipment"
    - "POST /equipment/equip"
    - "POST /equipment/unequip"
  integration_points:
    - "Materials system (F-04) for stat modifications"
    - "Combat system (F-02) reads player total stats"
    - "Upgrade system (F-06) increases item levels"

detailed_design:
  data_structures:
    - name: "item_types (seed data, ~20 items across 8 slots)"
      columns:
        - "id: UUID (PK)"
        - "name: VARCHAR ('Enormous Key', 'Umbrella', 'Halo')"
        - "category: VARCHAR (weapon, offhand, head, armor, feet, accessory_1, accessory_2, pet)"
        - "base_stats_normalized: JSON {atkPower: 0.4, atkAccuracy: 0.2, defPower: 0.3, defAccuracy: 0.1} (sums to 1.0)"
        - "description: TEXT"
        - "rarity: VARCHAR (common, uncommon, rare, epic, legendary) - affects stat multiplier 1.0-2.0"

    - name: "items"
      columns:
        - "id: UUID (PK)"
        - "user_id: UUID (FK to users)"
        - "item_type_id: UUID (FK to item_types)"
        - "level: INT (default 1, scales stats)"
        - "current_stats: JSON (optional cache: base_stats * rarity * level + material modifiers)"
        - "created_at: TIMESTAMP"
        - "Note: Equipment state in UserEquipment table, materials in ItemMaterials table"

    - name: "user_equipment"
      columns:
        - "user_id: UUID (PK, FK to users)"
        - "slot_name: VARCHAR (PK: weapon, offhand, head, armor, feet, accessory_1, accessory_2, pet)"
        - "item_id: UUID (nullable, FK to items)"
        - "equipped_at: TIMESTAMP"

  apis:
    - method: "GET"
      endpoint: "/inventory"
      request: "Header: Authorization Bearer token"
      response: "{items: [{id, item_type, level, rarity, applied_materials, is_styled, computed_stats, is_equipped}]}"
      errors:
        - "401: Unauthorized"

    - method: "GET"
      endpoint: "/equipment"
      request: "Header: Authorization Bearer token"
      response: "{slots: {weapon: item_obj, offhand: item_obj, head: item_obj, armor: item_obj, feet: item_obj, accessory_1: item_obj, accessory_2: item_obj, pet: item_obj}, total_stats: {atkPower, atkAccuracy, defPower, defAccuracy}}"
      note: "Queries UserEquipment table joined with Items. Equipment screen displays all 8 slots clearly with slot-specific descriptions."
      errors:
        - "401: Unauthorized"

  equipment_screen:
    slots:
      weapon: "What you fight with - offensive weapons like swords, keys, gatling guns"
      offhand: "Shield, second weapon for dual-wielding, or ranged weapon like pistol, umbrella, pizza box"
      head: "Helmet/hat protection - halos, cowboy hats, traffic cones"
      armor: "Chest/body/legs coverage - leather jackets, tuxedos, bathrobes"
      feet: "Footwear - fuzzy slippers, platform heels, snowboards"
      accessory_1: "Utility items - cape, skateboard, microwave (lucky charm items that boost stats)"
      accessory_2: "Second utility slot - cape, skateboard, microwave (lucky charm items that boost stats)"
      pet: "Companion with personality system (F-11) - dogs, raccoons, dragons, robots"

    - method: "POST"
      endpoint: "/equipment/equip"
      request: "{item_id: UUID}"
      response: "{success: true, slot: 'weapon', total_stats: {atkPower, atkAccuracy, defPower, defAccuracy}}"
      note: "Replaces existing item in slot (if any). Writes to UserEquipment table"
      errors:
        - "400: Item already equipped in another slot"
        - "404: Item not found"

    - method: "POST"
      endpoint: "/equipment/unequip"
      request: "{slot: VARCHAR}"
      response: "{success: true, total_stats: {atkPower, atkAccuracy, defPower, defAccuracy}}"
      errors:
        - "400: Slot already empty"

  diagrams: |
    Stat Calculation Flow:
    1. Get base item stats (normalized to 1.0)
    2. Apply rarity multiplier (ItemType.rarity: 1.0-2.0)
    3. Apply each material modifier (±0.1-0.3, sum to 0)
       - Materials have style_id (FK to StyleDefinitions) for visual variants only
       - Style does not affect stat effectiveness
    4. Multiply by item level
    5. Result = item's final stats

    Example:
    Base Sword: {atkPower: 0.4, atkAccuracy: 0.2, defPower: 0.3, defAccuracy: 0.1}
    × Rarity Multiplier (rare): 1.5
    = Rare Base: {atkPower: 0.6, atkAccuracy: 0.3, defPower: 0.45, defAccuracy: 0.15}
    + Iron Material: {atkPower: -0.1, atkAccuracy: 0, defPower: +0.1, defAccuracy: 0}
    + Flame Material: {atkPower: +0.2, atkAccuracy: 0, defPower: -0.2, defAccuracy: 0}
    = Modified: {atkPower: 0.7, atkAccuracy: 0.3, defPower: 0.35, defAccuracy: 0.15}
    × Level 5
    = Final: {atkPower: 3.5, atkAccuracy: 1.5, defPower: 1.75, defAccuracy: 0.75}

    Player Total Stats:
    Sum stats from all 8 equipped items (weapon + offhand + head + armor + feet + accessory_1 + accessory_2 + pet)

    Equipment Slot Distribution:
    - Weapon (3 types): Offensive focus (high atkPower, atkAccuracy) - what you fight with
    - Offhand (3 types): Shield, second weapon for dual-wielding, or ranged weapon like pistol
    - Head (3 types): Balanced awareness - helmet/hat protection
    - Armor (3 types): Defensive focus - chest/body/legs coverage
    - Feet (3 types): Mobility/balanced - footwear
    - Accessory_1 (6 types): Utility items - cape, skateboard, microwave (lucky charm items that boost stats)
    - Accessory_2 (6 types): Second utility slot - cape, skateboard, microwave (lucky charm items that boost stats)
    - Pet (5 types): Companion with personality system (F-11)

dependencies:
  libraries: "None (SwiftUI for UI)"
  services: "Backend inventory and equipment services"
  data_sources: "PostgreSQL items table, item_types seed data, materials table (F-04), StyleDefinitions table"

implementation_status:
  progress: 50  # Database schema + seed data complete, service layer needs implementation
  completed_components:
    - "Database schema (Items table with level, is_styled, material_combo_hash, generated_image_url, image_generation_status)"
    - "UserEquipment table with composite PK (user_id, slot_name) and FK to EquipmentSlots"
    - "27 ItemTypes seeded in database with normalized base stats"
    - "8 EquipmentSlots defined (weapon, offhand, head, armor, feet, accessory_1, accessory_2, pet)"
    - "InventoryController skeleton with getInventory endpoint"
    - "EquipmentController skeleton with getEquipment, equipItem, unequipItem endpoints"
    - "InventoryService skeleton with getPlayerInventory method"
    - "EquipmentService skeleton with getEquippedItems, equipItem, unequipItem methods"
    - "Zod validation schemas for equipment operations"
    - "API routes registered for /api/v1/inventory and /api/v1/equipment"
  in_progress_components:
    - "InventoryService.getPlayerInventory implementation (fetch all user items with calculated stats)"
    - "InventoryService.getItemDetails implementation (single item with applied materials)"
    - "EquipmentService.getEquippedItems implementation (fetch 8 slots with calculated total stats)"
    - "EquipmentService.equipItem implementation (equip item to slot, validate ownership)"
    - "EquipmentService.unequipItem implementation (unequip item from slot)"
    - "Stat calculation logic (sum all equipped items)"
    - "Material modifier application in stat calculation"
  blocked_items:
    - item: "Service layer implementation not started"
      reason: "Service method throws NotImplementedError - needs 6-step workflow implementation"
    - item: "EquipmentService.getEquippedItems implementation"
      reason: "Service method throws NotImplementedError - needs UserEquipment query with stat calculation"
    - item: "EquipmentService.equipItem implementation"
      reason: "Service method throws NotImplementedError - needs 7-step workflow with slot conflict handling"
    - item: "EquipmentService.unequipItem implementation"
      reason: "Service method throws NotImplementedError - needs slot validation and stat recalculation"
  notes:
    - "Database layer: 100% complete with Items, UserEquipment, ItemTypes, EquipmentSlots tables"
    - "27 ItemTypes seeded vs. 26 documented (1 extra type in seed data)"
    - "UserEquipment uses composite PK (user_id, slot_name) for normalized equipment state"
    - "Items table includes material integration columns (material_combo_hash, is_styled, generated_image_url)"
    - "Service layer: All methods documented with TODO workflows but not implemented"
    - "Controllers: Endpoint handlers exist but delegate to NotImplementedError services"
    - "Frontend: No SwiftUI implementation for inventory or equipment screens"
    - "Future planned: Multiple base types per slot, visual customization, item tooltips, compare items UI"
    - "Note: Accessory slot already split into accessory_1/accessory_2 in EquipmentSlots table"

user_stories:
  - US-301
  - US-302
